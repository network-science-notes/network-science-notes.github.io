{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "code-fold: true\n",
        "code-summary: \"Show code\"\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Models of Disease-Spread\n",
        "\n",
        "In this set of notes, we'll study several simple models of disease spread on networks. We'll implement and simulate these models using the `mesa` library for agent-based modeling. Then, we'll give an informal derivation of the *epidemic threshold* on networks, which describes the condition under which a disease can spread to a large portion of a networked population. \n",
        "\n",
        "*This is a set of simulation-driven nodes on agent-based modeling of epidemics on networks. Readers familiar with differential equations and probability generating functions may be interested in consulting the [advanced notes](52-epidemiology.qmd) for a more theoretical discussion of the epidemic threshold and the SIR model.*\n",
        "\n",
        "\n",
        "## Contact Networks\n",
        "\n",
        "We're going to consider two simple models of *contact networks*. In a contact network, edges model pathways through infection can spread between two individuals. Real contact networks are *temporal*: interactions occur at a specific point in time, and it is not possible to spread disease outside the time in which the interaction took place. For simplicity, we'll instead model contact networks as static graphs. This can be viewed as an approximation of social life in which we are exposed to the same people over time or every day. \n",
        "\n",
        "We'll construct two networks on which to run our simulations. By comparing results on these two networks, we'll ask and then give one answer to the question: \n",
        "\n",
        "> How does the structure of the social contact network influence the spread of disease? \n",
        "\n",
        "We'll form our two networks as follows: \n",
        "\n",
        "- For $G_1$, we'll use a power-law distribution to generate expected node degrees. \n",
        "- For $G_2$, we'll use a Poisson distribution to generate expected node degrees. The Poisson will be tuned to have the same mean degree as the power law. \n",
        "\n",
        "Once we have the expected node degrees, we'll use the Chung-Lu model to construct the graphs. Here are the degree distributions of the resulting graphs: \n"
      ],
      "id": "d5497871"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-cap: Degree distributions for the power law and Poisson random graphs used for our experiments. Several nodes with degree 0 in the power law graph are not shown.\n",
        "#| label: fig-degree-distributions\n",
        "from mesa import Model, Agent                 # core mesa classes\n",
        "from mesa.space import NetworkGrid             \n",
        "from mesa.datacollection import DataCollector\n",
        "\n",
        "import networkx as nx                         \n",
        "import numpy as np                            \n",
        "from matplotlib import pyplot as plt          \n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "\n",
        "alpha = 2 # power law parameter\n",
        "n = 500   # number of nodes\n",
        "\n",
        "def degree_sequence(G):\n",
        "    degrees = nx.degree(G)\n",
        "    degree_sequence = np.array([deg[1] for deg in degrees])\n",
        "    return degree_sequence\n",
        "\n",
        "# form the two degree graphs\n",
        "power_law_degs = np.random.zipf(alpha, n) \n",
        "G_1 = nx.expected_degree_graph(power_law_degs, selfloops = False)\n",
        "\n",
        "# we can get zero-degree nodes through this process; this code ensures that every node has degree at least 1\n",
        "done = False\n",
        "while not done: \n",
        "    degree_seq_G_1 = degree_sequence(G_1)\n",
        "    zero_deg_nodes = np.where(degree_seq_G_1 == 0)[0]\n",
        "    node_to_link = np.random.choice(G_1.nodes)\n",
        "    G_1.add_edge(node_to_link, zero_deg_nodes[0])\n",
        "    if degree_sequence(G_1).min() > 0:\n",
        "        done = True\n",
        "    \n",
        "poisson_mean = degree_sequence(G_1).mean()\n",
        "poisson_degs = np.random.poisson(poisson_mean, n)\n",
        "G_2 = nx.expected_degree_graph(poisson_degs, selfloops = False)\n",
        "\n",
        "# plotting degree distributions\n",
        "def log_binned_histogram(degree_sequence, interval = 5, num_bins = 20):\n",
        "    nonzero = degree_sequence[degree_sequence > 0]\n",
        "\n",
        "    hist, bins = np.histogram(nonzero, bins = min(int(len(nonzero)/interval), num_bins))\n",
        "    bins = np.logspace(np.log10(bins[0]),np.log10(bins[-1]),len(bins))\n",
        "    hist, bins = np.histogram(nonzero, bins = bins)\n",
        "    binwidths = bins[1:] - bins[:-1]\n",
        "    hist = hist / binwidths\n",
        "    p = hist/hist.sum()\n",
        "\n",
        "    return bins[:-1], p\n",
        "\n",
        "fig, ax = plt.subplots(1, 1, figsize = (5, 4))\n",
        "\n",
        "for i in range(2):\n",
        "    G = [G_1, G_2][i]\n",
        "    color = [\"slategrey\", \"firebrick\"][i]\n",
        "    deg_seq = degree_sequence(G)\n",
        "    x, p = log_binned_histogram(deg_seq, interval = 5, num_bins = 20)\n",
        "    ix = p > 0\n",
        "\n",
        "    ax.plot(x[ix], p[ix],  label = [r\"$G_1$: Power Law\", r\"$G_2$: Poisson\"][i], linestyle = \"--\", color = color)\n",
        "    ax.loglog()\n",
        "    ax.set_xlabel(\"Degree\")\n",
        "    ax.set_ylabel(\"Density\")\n",
        "    ax.legend()"
      ],
      "id": "fig-degree-distributions",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Compartmental Modeling\n",
        "\n",
        "Now that we have our structure in place, it's time to set the dynamics of the model. We are going to use the common framework of *compartmental modeling*. In compartmental models, each agent can be in one of several discrete *compartments*. These compartments represent the possible states in which an agent can exist. For example, in the **SI** model, there are two compartments: **S**usceptible and **I**nfected. In the **SIR** model, there are three compartments: **S**usceptible, **I**nfected, and **R**ecovered.\n",
        "\n",
        "A model framework can be specified at a high level by describing the compartments which exist as well as the rules by which agents move between states. \n",
        "\n",
        "In the models that we consider here, we'll usually assume a **S**usceptible population. We'll assume that one individual (\"Patient Zero\") starts out **I**nfected, and then track the course of the disease over time. \n",
        "\n",
        "## Implementation in Mesa\n",
        "\n",
        "We'll implement our epidemic models using the `mesa` library. The `CompartmentalModel` with asynchronous updating that we introduced last time for modeling opinion dynamics with the voter model will also work for epidemic modeling with just a few minor tweaks. The main work is to define new agents with new states and transitions.[In the [advanced notes](52-epidemiology.qmd) on the theory of epidemiology on graphs, you can learn more about how things look if we assume that infection takes place in continuous rather than discrete time.]{.aside} \n"
      ],
      "id": "db9ee188"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "class CompartmentalModel(Model):\n",
        "\n",
        "    # model setup\n",
        "    def __init__(self, G, agent_class, infection_rate = 0.1, recovery_rate = None):\n",
        "\n",
        "        super().__init__()\n",
        "        self.grid = NetworkGrid(G)    \n",
        "        self.infection_rate = infection_rate       \n",
        "        self.recovery_rate = recovery_rate\n",
        "        \n",
        "        # populate the graph\n",
        "        for node in list(G.nodes):\n",
        "            state = \"S\"\n",
        "            agent = agent_class(self, state)\n",
        "            self.grid.place_agent(agent, node)\n",
        "\n",
        "        # track the states of each agent over time\n",
        "        self.collector = DataCollector(\n",
        "            agent_reporters = {\n",
        "                \"state\" : lambda a: a.state\n",
        "            }\n",
        "        )\n",
        "\n",
        "        # seed infected individual \n",
        "        self.seed_infection()\n",
        "\n",
        "    # pick a single agent uniformly at random who will start out infected\n",
        "    def seed_infection(self):\n",
        "        patient_zero = np.random.choice(self.grid.agents)\n",
        "        patient_zero.state = \"I\"\n",
        "        self.collector.collect(self)\n",
        "\n",
        "    def step(self):\n",
        "        self.agents.do(\"step\")\n",
        "        self.agents.do(\"advance\")\n",
        "        self.collector.collect(self)"
      ],
      "id": "46493afc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "It now remains to specify the compartmental dynamics, which we do in the `Agent` class.  \n",
        "\n",
        "## The SI Model\n",
        "\n",
        "In the SI model, agents can be in one of two states: *susceptible* (S) or *infected* (I). Infected agents can infect their neighbors, and once an agent is infected, they are infected forever. The *state diagram* for the SI model looks like this: \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "graph LR\n",
        "    S -->|infection| I;\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "There are many ways to implement this general idea. For our implementation, we'll just assume that in each timestep, an agent has probability $p$ to be infected by each of their infected neighbors independently. This means that the probability of an agent being infected in a given timestep is $1 - (1-p)^k$, where $k$ is the number of infected neighbors. It is also possible to implement this update simply by looping through the neighbors and making updates depending on their states. \n"
      ],
      "id": "e8697dbe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "\n",
        "class SIAgent(Agent):\n",
        "    def __init__(self, model, state):\n",
        "        super().__init__(model)\n",
        "        self.state = state\n",
        "        self.new_state = self.state\n",
        "\n",
        "    def get_infected(self):\n",
        "\n",
        "        neighbors = self.model.grid.get_neighbors(self.pos,  \n",
        "                                                include_center = False) \n",
        "        \n",
        "        self.new_state = self.state\n",
        "        for neighbor in neighbors:\n",
        "            if neighbor.state == \"I\":\n",
        "                if np.random.rand() < self.model.infection_rate:\n",
        "                    self.new_state = \"I\"\n",
        "            \n",
        "\n",
        "    def step(self):\n",
        "        if self.state == \"S\":\n",
        "            self.get_infected()\n",
        "        elif self.state == \"I\":\n",
        "            pass \n",
        "    \n",
        "    def advance(self):\n",
        "        self.state = self.new_state"
      ],
      "id": "19727da7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "First, let's look at the progress of our simulation in a small, simple network: \n"
      ],
      "id": "c74f912a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-cap: Progress of the SI model in a small network. Grey nodes are susceptible and orange nodes are infected.\n",
        "#| label: fig-SI-illustration\n",
        "\n",
        "np.random.seed(1234)\n",
        "G = nx.random_geometric_graph(50, 0.25)\n",
        "pos = nx.kamada_kawai_layout(G)\n",
        "\n",
        "sim = CompartmentalModel(G, SIAgent, infection_rate = 0.2)\n",
        "\n",
        "fig, axarr = plt.subplots(2, 3, figsize = (8, 4.5))\n",
        "\n",
        "state_colors = {\n",
        "    \"S\" : \"lightgrey\", \n",
        "    \"I\" : \"orange\", \n",
        "    \"R\" : \"steelblue\"\n",
        "}\n",
        "\n",
        "for i in range(6):\n",
        "    ax = axarr.ravel()[i]\n",
        "    sim.step()\n",
        "    states = sim.collector.get_agent_vars_dataframe()\n",
        "    colors = [state_colors[s] for s in states.loc[i].values.ravel()]\n",
        "    nx.draw(G, pos, node_color = colors, ax = ax, node_size = 20, edge_color = \"grey\", width = 0.1, edgecolors = \"black\")\n",
        "    ax.set(title = f\"Step {i}\", xticks = [], yticks = [])\n"
      ],
      "id": "fig-SI-illustration",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "How representative is this visualization? Would we see something similar on our two model networks $G_1$ and $G_2$? To address these questions, let's define a function to run the simulation on a specified network and compute the total number of agents in each compartment over time: \n"
      ],
      "id": "355f118b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "def epi_experiment(G, agent_type, timesteps, infection_rate, ax, recovery_rate = None, label = True, **kwargs):\n",
        "\n",
        "    # initialize and run the model\n",
        "    sim = CompartmentalModel(G, agent_type, infection_rate = infection_rate, recovery_rate = recovery_rate)\n",
        "    for _ in range(timesteps): \n",
        "        sim.step()\n",
        "    \n",
        "    # gather counts of states over time\n",
        "    df = sim.collector.get_agent_vars_dataframe()\n",
        "    counts = df.groupby([\"Step\", \"state\"]).size().unstack().fillna(0)\n",
        "    proportions = counts / counts.sum(axis = 1).values[:, None]\n",
        "    \n",
        "    # plotting\n",
        "    states = list(proportions.columns)\n",
        "    \n",
        "\n",
        "    for i, state in enumerate([\"I\", \"R\"]):\n",
        "        if state in proportions.columns: \n",
        "            if label:   \n",
        "                ax.plot(proportions[state], label = state, color = state_colors[state], **kwargs)\n",
        "            else: \n",
        "                ax.plot(proportions[state], color = state_colors[state], **kwargs)\n",
        "\n",
        "    ax.set_xlabel(\"Time\")\n",
        "    ax.set_ylabel(\"Number of Agents\")\n",
        "    ax.set(ylim = (-0.02, 1.02))\n",
        "    ax.legend()"
      ],
      "id": "b48cc2d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we can run simulations and plot the total number of infected nodes like this: \n"
      ],
      "id": "04d94750"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "timesteps = 100\n",
        "fig, ax = plt.subplots(1, 1, figsize = (5, 3))\n",
        "infection_rate = 0.3\n",
        "\n",
        "epi_experiment(G_1, SIAgent, timesteps, infection_rate = infection_rate, ax = ax)"
      ],
      "id": "4cad02fd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "After an initial quiet period, the disease rapidly takes over a large fraction of the population. \n",
        "\n",
        "Is this typical behavior? Let's run 20 simulations on both graphs and compare: \n"
      ],
      "id": "44ddcaa3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-cap: Proportion of Infected individuals over time in the SI model on the two networks $G_1$ (left) and $G_2$ (right). The proportion of Susceptible individuals is equal to $1$ minus the proportion of Infected individuals and is not shown.\n",
        "#| label: fig-SI-batch-sims\n",
        "\n",
        "fig, ax = plt.subplots(1, 2, figsize = (6, 2.8))\n",
        "\n",
        "for i in range(20):\n",
        "    epi_experiment(G_1, SIAgent, timesteps, infection_rate = infection_rate,   ax = ax[0], alpha = 0.5, label = i == 0)\n",
        "    epi_experiment(G_2, SIAgent, timesteps, infection_rate = infection_rate,   ax = ax[1], alpha = 0.5, label = i == 0)\n",
        "\n",
        "plt.tight_layout()"
      ],
      "id": "fig-SI-batch-sims",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Several features stand out: \n",
        "\n",
        "1. The disease does not inevitably take over the entirety of $G_1$: in some cases, it seems that only very few agents are infected, while in others a very large fraction of the population is infected. \n",
        "2. It appears that the disease tends to work its way slightly more quickly thorough $G_1$ and $G_2$. An interesting qualitative feature is the apparent explosive growth in the infection rate from a seeming period of calm in $G_1$. In $G_2$, on the other hand, the increase in infection is somewhat more gradual. \n",
        "\n",
        "::: {.callout-important}\n",
        "\n",
        "Can you explain observation 1? What determines the final size of the epidemic? \n",
        "\n",
        "*Hint*: think about the initial condition and the graph structure. \n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## The SIR Model\n",
        "\n",
        "Now we'll suppose that agents can also *recover* from infection. A recovered (R) agent is no longer susceptible to disease and can therefore never become infected again. The corresponding state diagram looks like this:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "graph LR\n",
        "    S -->|infection| I -->|recovery| R;\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "In most implementations of the SIR model, the recovery rate does not depend on the status of one's neighbors: an infected node simply becomes recovered with some fixed probability each day. Once an agent is recovered, they are considered to be immune and no longer susceptible to infection. To implement this behavior, we just need to implement a `recover` method and lightly modify the `step` method to incorporate recovery. We can save a few lines of code by inheriting from the previous `SIAgent` class. \n"
      ],
      "id": "655b56d7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "class SIRAgent(SIAgent):\n",
        "\n",
        "    def recover(self):\n",
        "\n",
        "        # recover with fixed specified probability\n",
        "        if np.random.rand() < self.model.recovery_rate:\n",
        "            self.new_state = \"R\"\n",
        "\n",
        "    def step(self):\n",
        "        if self.new_state == \"S\":\n",
        "            self.get_infected()\n",
        "        elif self.new_state == \"I\":\n",
        "            self.recover()\n",
        "        elif self.new_state == \"R\":\n",
        "            pass            "
      ],
      "id": "5ee7c631",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now there are three states that an agent could have at any given time. The evolution of the disease states now looks more like this: \n"
      ],
      "id": "9c64bc98"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-cap: 'Progress of the SIR model in a small network. Grey nodes are susceptible, orange nodes are infected, and blue nodes are recovered.'\n",
        "#| label: fig-SIR-illustration\n",
        "\n",
        "np.random.seed(1234)\n",
        "G = nx.random_geometric_graph(50, 0.25)\n",
        "# pos = nx.fruchterman_reingold_layout(G)\n",
        "pos = nx.kamada_kawai_layout(G)\n",
        "\n",
        "sim = CompartmentalModel(G, SIRAgent, infection_rate = 0.5, recovery_rate = 0.3)\n",
        "\n",
        "fig, axarr = plt.subplots(3, 3, figsize = (9, 7.5))\n",
        "\n",
        "for i in range(9):\n",
        "    ax = axarr.ravel()[i]\n",
        "    sim.step()\n",
        "    states = sim.collector.get_agent_vars_dataframe()\n",
        "    colors = [state_colors[s] for s in states.loc[i].values.ravel()]\n",
        "    nx.draw(G, pos, node_color = colors, ax = ax, node_size = 20, edge_color = \"grey\", width = 0.1, edgecolors = \"black\")\n",
        "    ax.set(title = f\"Step {i}\", xticks = [], yticks = [])"
      ],
      "id": "fig-SIR-illustration",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Over time, Infected nodes become Recovered, after which they cannot become Infected again. This causes the disease to travel across the graph, leaving groups of Recovered nodes in its wake.\n",
        "\n",
        "Let's now do a batch experiment in which we observe the proportion of both Infected and Recovered individuals over many simulation runs. We'll choose a recovery rate corresponding to an average illness duration of approximately two weeks. \n"
      ],
      "id": "887c6084"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "infection_rate = 0.04\n",
        "recovery_rate = 1/14 \n",
        "\n",
        "timesteps = 200\n",
        "fig, ax = plt.subplots(1, 2, figsize = (6, 2.8))\n",
        "for i in range(20):\n",
        "    epi_experiment(G_1, SIRAgent, timesteps, infection_rate = infection_rate, recovery_rate = recovery_rate, ax = ax[0], alpha = 0.5, label = i == 0)\n",
        "    epi_experiment(G_2, SIRAgent, timesteps, infection_rate = infection_rate, recovery_rate = recovery_rate, ax = ax[1], alpha = 0.5, label = i == 0)\n",
        "\n",
        "ax[0].set_title(r\"$G_1$: Power-Law Degree Distribution\")\n",
        "ax[1].set_title(r\"$G_2$: Poisson Degree Distribution\")\n",
        "\n",
        "plt.tight_layout()"
      ],
      "id": "18f893f1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here we can observe an interesting difference between the two network substrates: \n",
        "\n",
        "- In the power law graph $G_1$, the disease spreads rapidly in an early initial phase before dying out. \n",
        "- In the Poisson graph $G_2$ on the other hand, the disease spreads more slowly through the population. In at least some simulations, however, the disease ultimately infects a larger fraction of individuals. \n",
        "\n",
        "There is an even more striking difference between the two models when the infection rate is lower: \n"
      ],
      "id": "f91994e9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "infection_rate = 0.015\n",
        "timesteps = 200\n",
        "fig, ax = plt.subplots(1, 2, figsize = (6, 2.8))\n",
        "for i in range(20):\n",
        "    epi_experiment(G_1, SIRAgent, timesteps, infection_rate = infection_rate, recovery_rate = recovery_rate, ax = ax[0], alpha = 0.5, label = i == 0)\n",
        "    epi_experiment(G_2, SIRAgent, timesteps, infection_rate = infection_rate, recovery_rate = recovery_rate, ax = ax[1], alpha = 0.5, label = i == 0)\n",
        "\n",
        "ax[0].set_title(r\"$G_1$: Power-Law Degree Distribution\")\n",
        "ax[1].set_title(r\"$G_2$: Poisson Degree Distribution\")\n",
        "\n",
        "plt.tight_layout()"
      ],
      "id": "35aa4450",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Whereas in the Poisson random graph $G_2$ large outbreaks are rare and relatively slow-moving, in the power law graph $G_1$ we see that large outbreaks are possible and rip through the population much faster. \n",
        "\n",
        "## Theory: What's Going On?\n",
        "\n",
        "How can we explain the difference in behaviors between epidemic outbreaks on these two contact networks? The mean degree in these networks is relatively similar: \n"
      ],
      "id": "43955790"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mean_deg_1 = degree_sequence(G_1).mean()\n",
        "mean_deg_2 = degree_sequence(G_2).mean()\n",
        "\n",
        "print(f\"Mean degree of G_1:  {mean_deg_1:.2f}\")\n",
        "print(f\"Mean degree of G_2:  {mean_deg_2:.2f}\")"
      ],
      "id": "1f6b8f14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "So, it's not the case that $G_1$ is \"more connected on average\" than $G_2$. Instead, we need to ask questions about *how* these two networks are connected. \n",
        "\n",
        "Let's do some simple heuristic reasoning to understand the connectivity difference. [For a more theoretically rich discussion, see the [advanced nodes](52-epidemiology.qmd)]{.aside}. The question we'll consider is: in expectation, how many infections are caused by each infectious agent before they recover? This is sometimes called the *basic reproduction number* of the disease, and is denoted by $R_0$. If $R_0 < 1$, we expect the disease to die out quickly, while if $R_0 > 1$, we expect the disease to spread exponentially through the population. \n",
        "\n",
        "Here's a first attempt to derive $R_0$. Let $\\beta$ be the probability that transmission occurs from an infected agent to a susceptible neighbor in a given timestep. The average amount of time that an individual spends infectious is $1/\\gamma$, where $\\gamma$ is the recovery rate per day. Assuming that $\\beta$ is relatively small, the probability that an infected individual passes the disease to a given susceptible neighbor before recovering is approximately $\\beta/\\gamma$.\n",
        "\n",
        "So, if Patient 0 is node $i$, then the expected number of infections caused directly by Patient 0 before they recover is $\\theta_i = \\beta/\\gamma k_i$, where $k_i$ is the degree of node $i$. If $\\theta_i \\geq 1$, then, on average, Patient 0 will infect at least one of their neighbors before recovering. Averaging over all possible initial nodes $i$, we derive our first attempt to measure $R_0$: \n",
        "$$\n",
        "\\begin{aligned}\n",
        "    R_0 \\stackrel{?}{=} \\langle \\theta_i \\rangle = \\frac{\\beta}{\\gamma} \\langle k_i \\rangle = \\frac{\\beta}{\\gamma} \\langle k \\rangle\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "Let's compute this measure for each of our graphs: \n"
      ],
      "id": "9656f3cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "r_1 = degree_sequence(G_1).mean() * infection_rate / recovery_rate \n",
        "r_2 = degree_sequence(G_2).mean() * infection_rate / recovery_rate \n",
        "\n",
        "print(f\"beta/gamma * <k> in G_1:  {r_1:.2f}\")\n",
        "print(f\"beta/gamma * <k> in G_2:  {r_2:.2f}\")"
      ],
      "id": "bd77e0e5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The two graphs have very similar values of the measure $ \\frac{\\beta}{\\gamma} \\langle k \\rangle$, which makes sense since this measure differs between the two graphs only in the mean degree $\\langle k \\rangle$, which we intentionally made similar between the graphs. \n",
        "\n",
        "To explain the difference, we need to return to our discussion of [graphs with fixed degree distributions](11-configuration-models.qmd). The number of neighbors of Patient 0 is distributed according to the degree distribution $p_k$ of the graph, and the mean is $\\langle k \\rangle$. However, the number of neighbors *of those neighbors* is not distributed according to $p_k$. Instead, as we saw when discussing graphs with fixed degree distribution, the distribution $q_k$ of the number of neighbors attached to a node (excluding the edge we traveled along to get there) is given by the formula [As a refresher, the intuition here is that for the node to have $k$ neighbors (excluding the edge we traveled on) it must have total degree $k+1$. The probability that a given node has this degree is $p_{k+1}$ and there are $k+1$ ways to travel to that node along an edge. The $\\langle k \\rangle$ in the denominator is for normalization.]{.aside}\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "    q_k = \\frac{(k+1)p_{k+1}}{\\langle k \\rangle }\\;.\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "So, the expected number of neighbors of a node in the second generation of infection is \n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "    \\sum_{k = 0}^\\infty k q_k &= \\sum_{k = 0}^\\infty k \\frac{(k+1)p_{k+1}}{\\langle k \\rangle} \\\\ \n",
        "    &= \\frac{1}{\\langle k \\rangle} \\sum_{k' = 1}^\\infty (k'-1) k'p_{k'} &\\quad \\text{(Let $k' = k+1$)} \\\\ \n",
        "    &= \\frac{1}{\\langle k \\rangle} \\sum_{k' = 0}^\\infty (k'-1) k'p_{k'} \\\\ \n",
        "    &= \\frac{\\langle k^2 \\rangle - \\langle k \\rangle}{\\langle k \\rangle} \n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "This corresponds to an expected number of infections given by \n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "    R_0 = \\frac{\\beta}{\\gamma} \\frac{\\langle k^2 \\rangle - \\langle k \\rangle}{\\langle k \\rangle} \n",
        "\\end{aligned}\n",
        "$${#eq-R0}\n",
        "\n",
        "Let's measure this for each of our two graphs: \n"
      ],
      "id": "6aa1373a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def mean_excess_degree(G):\n",
        "    k = degree_sequence(G)\n",
        "    mean_k = k.mean()\n",
        "    mean_k_2 = (k**2).mean()\n",
        "    return (mean_k_2 - mean_k) / mean_k\n",
        "\n",
        "R0_1 = infection_rate / recovery_rate * mean_excess_degree(G_1)\n",
        "R0_2 = infection_rate / recovery_rate * mean_excess_degree(G_2)\n",
        "\n",
        "print(f\"<k^2> in G_1:  {R0_1:.2f}\")\n",
        "print(f\"<k^2> in G_2:  {R0_2:.2f}\")"
      ],
      "id": "69985a05",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we can see a clearer difference between the two graph structures: $R_0$ in $G_1$ is indeed sufficient to support initial exponential growth of the outbreak, while $R_0$ in $G_2$ is not. \n",
        "\n",
        "@eq-R0 can be used to make predictions about when a disease has the capability to spread in a contact network. Note the condition $R_0$ does not *guarantee* that large-scale spread will occur, but does indicate risk. \n",
        "\n",
        "[An interesting consequence of @eq-R0 is that a theoretical network in which $\\langle k^2 \\rangle = \\infty$\" (i.e. the sum $\\sum_{k}k^2 p_k$ does not converge) *always* admits wide-scale spread of disease, no matter how transmissible the disease is or how quickly agents recover. Another way to say this is that the *epidemic threshold*, which is the critical value of the ratio $\\frac{\\beta}{ \\gamma}$ that admits large-scale spread, is $0$.]{.aside}\n",
        "\n",
        "Intuitively, what is happening here is that there are a small number of nodes in $G_1$ with *very* high degree. In the event that one of these nodes is infected, they have a large number of neighbors to which they may transmit disease. Even if the disease has a low transmission rate, the sheer number of people who come into contact with these nodes ensures spread. Such nodes are often called *super-spreaders*. A simple way to describe the difference between $G_1$ and $G_2$ is that $G_1$ has super-spreaders while $G_2$ does not. "
      ],
      "id": "bc187f8d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/philchodrow/My Drive (pchodrow@middlebury.edu)/teaching/networks-notes/env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}